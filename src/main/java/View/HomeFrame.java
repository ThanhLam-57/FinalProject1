/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import DAO.DepartmentDAO.DepartmentDAO;
import DAO.EmployeeDAO.EmployeeDAO;
import DAO.StatisticsDAO.StatisticsDAO;
import Modal.Department;
import Modal.Employees;
import Modal.Statistics;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class HomeFrame extends javax.swing.JFrame implements View{

    /**
     * Creates new form HomeFrame
     */
    private int selectedIndex;
    public EmployeeDAO employeeDAO;
    public DepartmentDAO departmentDAO;
    List<Employees> employeeses = employeeDAO.getAllEmployees();
    List<Department> departments = departmentDAO.getAllDepartment();
    List<Employees> listEmployeeisDelete = employeeDAO.getAllEmployeesDelete();

    List<String> listDepartment = new ArrayList<>();

    List<Employees> listTransferEmployee = new ArrayList<>();

    List<Statistics> listStatistics = StatisticsDAO.getStatistics();
    private DefaultTableModel modelTableEmployee;
    private DefaultTableModel modelTableDepartment;
    private DefaultTableModel modelTableTrabsferEmployee;

    private DefaultTableModel modalTabbleTK;
    public HomeFrame() {
        initComponents();
        showCbbDepartment();
        showCbbDepartment1();
        showCbbDepartment2();
        this.setLocationRelativeTo(null);

        modelTableEmployee = (DefaultTableModel) tblEmployee.getModel();
        this.showData(employeeses, modelTableEmployee);

        modelTableDepartment = (DefaultTableModel) tblDepartment.getModel();
        this.showDataDepartment(departments, modelTableDepartment);

        modalTabbleTK = (DefaultTableModel) jTable1.getModel();
        this.showOptionlistStatistics(listStatistics, modalTabbleTK);

        modelTableTrabsferEmployee = (DefaultTableModel) tblTransferEmployee.getModel();
        this.showOptionTransferEmp(EmployeeDAO.getEmployeeByDepartment(0,1), modelTableTrabsferEmployee);
    }


    public void AddEmployee(){
        this.showData(employeeses, modelTableEmployee);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        transferEmployee = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        BtnAddEmployee = new javax.swing.JButton();
        btnOptionEdit = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        btnLoadDataEmp = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cbbDepartment = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDepartment = new javax.swing.JTable();
        btnAddDepartment = new javax.swing.JButton();
        btnEditDepartment = new javax.swing.JButton();
        btnDeleteDepartment = new javax.swing.JButton();
        btnLoadDataDepartment = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTransferEmployee = new javax.swing.JTable();
        cbbDepartment1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButtonTransferEmp = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbbDepartment2 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        lbHeader = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Ngày sinh", "Giới tính", "Địa chỉ", "Số điện thoại", "Email", "Lương", "Phòng ban", "Người quản lý"
            }
        ));
        jScrollPane1.setViewportView(tblEmployee);

        BtnAddEmployee.setText("Thêm nhân viên");
        BtnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAddEmployeeActionPerformed(evt);
            }
        });

        btnOptionEdit.setText("Sửa thông tin nhân viên");
        btnOptionEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionEditActionPerformed(evt);
            }
        });

        jButton13.setText("Xoá nhân viên");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        btnLoadDataEmp.setText("Load lại dữ liệu");
        btnLoadDataEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataEmpActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        txtSearch.setText("Tìm kiếm theo mã, tên, số điện thoại, email");
        txtSearch.setPreferredSize(new java.awt.Dimension(64, 30));
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Tìm kiếm");
        btnSearch.setPreferredSize(new java.awt.Dimension(79, 30));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cbbDepartment.setPreferredSize(new java.awt.Dimension(200, 30));
        cbbDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbDepartmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BtnAddEmployee)
                        .addGap(87, 87, 87)
                        .addComponent(btnOptionEdit)
                        .addGap(86, 86, 86)
                        .addComponent(jButton13)
                        .addGap(122, 122, 122)
                        .addComponent(btnLoadDataEmp))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(232, 232, 232)
                        .addComponent(cbbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnAddEmployee)
                    .addComponent(btnOptionEdit)
                    .addComponent(jButton13)
                    .addComponent(btnLoadDataEmp))
                .addGap(31, 31, 31)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        transferEmployee.addTab("Quản lý nhân viên", jPanel3);

        tblDepartment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID phòng ban", "Mã phòng ban", "Tên phòng ban"
            }
        ));
        jScrollPane2.setViewportView(tblDepartment);

        btnAddDepartment.setText("Thêm phòng ban");
        btnAddDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDepartmentActionPerformed(evt);
            }
        });

        btnEditDepartment.setText("Sửa thông tin phòng ban");
        btnEditDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDepartmentActionPerformed(evt);
            }
        });

        btnDeleteDepartment.setText("Xoá phòng ban");
        btnDeleteDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDepartmentActionPerformed(evt);
            }
        });

        btnLoadDataDepartment.setText("Load lại dữ liệu");
        btnLoadDataDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataDepartmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(btnAddDepartment)
                .addGap(61, 61, 61)
                .addComponent(btnEditDepartment)
                .addGap(57, 57, 57)
                .addComponent(btnDeleteDepartment)
                .addGap(64, 64, 64)
                .addComponent(btnLoadDataDepartment)
                .addContainerGap(311, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDepartment)
                    .addComponent(btnEditDepartment)
                    .addComponent(btnDeleteDepartment)
                    .addComponent(btnLoadDataDepartment))
                .addGap(0, 103, Short.MAX_VALUE))
        );

        transferEmployee.addTab("Quản lý phòng ban", jPanel4);

        tblTransferEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã NV", "Tên nhân viên", "Chức vụ", "Phòng ban", "Lương"
            }
        ));
        jScrollPane3.setViewportView(tblTransferEmployee);

        cbbDepartment1.setPreferredSize(new java.awt.Dimension(200, 30));
        cbbDepartment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbDepartment1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn", "Nghỉ việc", "Chưa có phòng ban" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButtonTransferEmp.setText("Luân chuyển nhân sự");
        jButtonTransferEmp.setPreferredSize(new java.awt.Dimension(143, 30));
        jButtonTransferEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransferEmpActionPerformed(evt);
            }
        });

        jButton1.setText("Tính thuế");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Phòng ban");

        jLabel2.setText("Tình trang công việc");

        jLabel3.setText("Chọn phòng ban mới");

        cbbDepartment2.setPreferredSize(new java.awt.Dimension(200, 30));
        cbbDepartment2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbDepartment2ActionPerformed(evt);
            }
        });

        jButton2.setText("Xoá nhân viên khỏi phòng ban");
        jButton2.setPreferredSize(new java.awt.Dimension(75, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Thăng chức");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Đi làm trở lại");
        jButton4.setPreferredSize(new java.awt.Dimension(97, 30));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        lbHeader.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbHeader.setPreferredSize(new java.awt.Dimension(300, 40));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbbDepartment1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbbDepartment2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonTransferEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(131, 131, 131)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(261, 261, 261))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lbHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTransferEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbDepartment1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbDepartment2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        transferEmployee.addTab("Nhân sự", jPanel1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Phòng ban", "Số lượng nhân viên", "Quản lý", "Nhân viên lương cao nhất", "Lương cao nhất"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(296, Short.MAX_VALUE))
        );

        transferEmployee.addTab("Thống kê", jPanel2);

        jTabbedPane1.addTab("Hr Manager", transferEmployee);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Thành viên nhóm :");
        jLabel4.setPreferredSize(new java.awt.Dimension(200, 40));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Nguyễn Thanh Lâm");
        jLabel5.setPreferredSize(new java.awt.Dimension(300, 40));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Nguyễn Việt Hoàng");
        jLabel6.setPreferredSize(new java.awt.Dimension(300, 40));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("Phần mềm quản lý nhân viên");
        jLabel7.setPreferredSize(new java.awt.Dimension(200, 40));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(341, 341, 341)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(471, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(346, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Giới thiệu nhóm", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbbDepartment1ActionPerformed(ActionEvent evt) {
        int index = cbbDepartment1.getSelectedIndex();
        String selectValue = cbbDepartment1.getSelectedItem().toString();
        int isDelete = 1;
        if (selectValue.equals("Tất cả")) {
            this.showOptionTransferEmp(employeeDAO.getEmployeeByDepartment(0,isDelete), modelTableTrabsferEmployee);
            listTransferEmployee = employeeDAO.getEmployeeByDepartment(0,isDelete);
            lbHeader.setText("Danh sách nhân viên hiện tại");
        }
        if(index>= 1){
            this.showOptionTransferEmp(employeeDAO.getEmployeeByDepartment(departments.get(index-1).getDepartment_id(),isDelete), modelTableTrabsferEmployee);
            listTransferEmployee = employeeDAO.getEmployeeByDepartment(departments.get(index-1).getDepartment_id(),isDelete);
            lbHeader.setText("Danh sách nhân viên " + departments.get(index-1).getDepartment_name());
        }
    }

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {
        int  indexOptionEMp = jComboBox2.getSelectedIndex();
        if (indexOptionEMp == 0) {
            this.showOptionTransferEmp(employeeDAO.getAllEmployees(), modelTableTrabsferEmployee);
            listTransferEmployee = employeeDAO.getAllEmployees();
            lbHeader.setText("Danh sách nhân viên hiện tại");
        } else if (indexOptionEMp == 1) {
            this.showOptionTransferEmp(employeeDAO.getAllEmployeesDelete(), modelTableTrabsferEmployee);
            listTransferEmployee = employeeDAO.getAllEmployeesDelete();
            lbHeader.setText("Danh sách nhân viên đã xóa");
        } else if (indexOptionEMp == 2) {
            this.showOptionTransferEmp(employeeDAO.getAllEmployeesNotDep(), modelTableTrabsferEmployee);
            listTransferEmployee = employeeDAO.getAllEmployeesNotDep();
            lbHeader.setText("Danh sách nhân viên chưa phân bộ phận");
        }
    }

    private void btnLoadDataDepartmentActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        this.showDataDepartment(departmentDAO.getAllDepartment(), modelTableDepartment);
    }

    private void btnAddDepartmentActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        new AddDepartment(this, rootPaneCheckingEnabled).setVisible(true);
        this.showDataDepartment(departmentDAO.getAllDepartment(), modelTableDepartment);
        cbbDepartment.addItem(departmentDAO.getAllDepartment().get(departmentDAO.getAllDepartment().size()-1).getDepartment_name());
        cbbDepartment1.addItem(departmentDAO.getAllDepartment().get(departmentDAO.getAllDepartment().size()-1).getDepartment_name());
        cbbDepartment2.addItem(departmentDAO.getAllDepartment().get(departmentDAO.getAllDepartment().size()-1).getDepartment_name());

    }

    private void btnLoadDataEmpActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        this.showData(employeeDAO.getAllEmployees(), modelTableEmployee);
        cbbDepartment.setSelectedItem("Tất cả");
        txtSearch.setText("");
    }

    private void BtnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAddEmployeeActionPerformed
       new AddEmployee(this,rootPaneCheckingEnabled).setVisible(true);
    }//GEN-LAST:event_BtnAddEmployeeActionPerformed

    private void btnOptionEditActionPerformed(java.awt.event.ActionEvent evt) {
        selectedIndex = tblEmployee.getSelectedRow();
        if(employeeses.size()==0){
            JOptionPane.showMessageDialog(rootPane, "Không có nhân viên để sửa");
        }else if(selectedIndex == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn nhân viên để sửa");
        }else{
            EditEmployee editEmployee = new EditEmployee(this, rootPaneCheckingEnabled);
            editEmployee.setEditData(employeeDAO.getAllEmployees().get(selectedIndex));
            editEmployee.setVisible(true);
            this.showData(employeeDAO.getAllEmployees(), modelTableEmployee);
        }
    }                                             

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String keyword = txtSearch.getText();
        this.showData(employeeDAO.searchEmployee(keyword), modelTableEmployee);
    }

    private void cbbDepartment2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbDepartment2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbDepartment2ActionPerformed

    private void btnEditDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDepartmentActionPerformed
        int selectedItem = tblDepartment.getSelectedRow();
        if(departments.size()==0){
            JOptionPane.showMessageDialog(rootPane, "Không có phòng ban để sửa");
        }else if(selectedItem == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn phòng ban để sửa");
        }
        else{
            EditDepartment editDepartment = new EditDepartment(this, rootPaneCheckingEnabled);
            editDepartment.setEditData(departmentDAO.getAllDepartment().get(selectedItem));
            editDepartment.setVisible(true);
            this.showDataDepartment(departmentDAO.getAllDepartment(), modelTableDepartment);
        }
    }//GEN-LAST:event_btnEditDepartmentActionPerformed

    //Tính thuế
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectItem = tblTransferEmployee.getSelectedRow();
        if(listTransferEmployee.size()==0){
            JOptionPane.showMessageDialog(rootPane, "Không có nhân viên để tính thuế");
        }else if(selectItem == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn nhân viên để tính thuế");
        }
        else{
            GetTax getTax = new GetTax(this, rootPaneCheckingEnabled);
            getTax.setEditData(listTransferEmployee.get(selectItem));
            getTax.setVisible(true);
            this.showData(employeeDAO.getAllEmployees(), modelTableEmployee);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        //Check xem có thuốc danh sách nghỉ việc hay không
        //Nếu có thì cho nó đi làm lại
        //Nếu không thì hiển thị thông báo "Nhân viên này chưa nghỉ việc"
        int index = tblTransferEmployee.getSelectedRow();
        if (employeeDAO.getEmployeesIdDelete(listTransferEmployee.get(index).getEmployee_id()) == false){
            JOptionPane.showMessageDialog(rootPane, "Nhân viên này chưa nghỉ việc");
        }else {
            if(index == -1){
                JOptionPane.showMessageDialog(rootPane, "Chọn nhân viên");
            }else{
                int id = listTransferEmployee.get(index).getEmployee_id();
                int result = JOptionPane.showConfirmDialog(rootPane, "Bạn có muốn cho nhân viên này đi làm không?");
                if(result == JOptionPane.YES_OPTION){
                    if(employeeDAO.goBackToWork(id) == true){
                        JOptionPane.showMessageDialog(rootPane, "Thêm thành công");
                        this.showData(employeeDAO.getAllEmployees(), modelTableEmployee);
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Thêm thất bại");
                    }
                }
            }
        }
    }

    private void btnDeleteDepartmentActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int index = tblDepartment.getSelectedRow();
        if(index == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn phòng ban để xoá");
        }else{
            int id = departments.get(index).getDepartment_id();
            int result = JOptionPane.showConfirmDialog(rootPane, "Bạn có muốn xoá phòng ban này không?");
            if(result == JOptionPane.YES_OPTION){
                if(departmentDAO.deleteDepartment(id)){
                    JOptionPane.showMessageDialog(rootPane, "Xoá thành công");
                    this.showDataDepartment(departmentDAO.getAllDepartment(), modelTableDepartment);
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Xoá thất bại");
                }
            }
        }
    }


    //TODO Xoá nhân viên khỏi phòng ban
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // delete employee form department
        int index = tblTransferEmployee.getSelectedRow();
        if(index == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn nhân viên để xoá");
        }else{
            int id = listTransferEmployee.get(index).getEmployee_id();
            int idDepartment = listTransferEmployee.get(index).getDepartment_id();
            int result = JOptionPane.showConfirmDialog(rootPane, "Bạn có muốn xoá nhân viên này không?");
            if(result == JOptionPane.YES_OPTION){
                if(employeeDAO.updateEmployeeDelete(id)){
                    JOptionPane.showMessageDialog(rootPane, "Xoá thành công");
                    this.showOptionTransferEmp(employeeDAO.getEmployeeByDepartment(idDepartment, 1), modelTableTrabsferEmployee);
                    listTransferEmployee = employeeDAO.getEmployeeByDepartment(idDepartment, 1);
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Xoá thất bại");
                }
            }
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //employee promotion
        int index = tblTransferEmployee.getSelectedRow();
        if(index == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn nhân viên để thăng chức");
        }else{
            if (employeeDAO.getEmployeesIdDelete(listTransferEmployee.get(index).getEmployee_id()) == true){
                JOptionPane.showMessageDialog(rootPane, "Không còn là nhân viên");
                return;
            }
            if (listTransferEmployee.get(index).getDepartment_id() == 0){
                JOptionPane.showMessageDialog(rootPane, "Nhân viên này chưa có phòng ban");
                return;
            }
            int id = listTransferEmployee.get(index).getEmployee_id();
            int idDepartment = listTransferEmployee.get(index).getDepartment_id();
            int result = JOptionPane.showConfirmDialog(rootPane, "Bạn có muốn thăng chức cho nhân viên này không?");
            if(result == JOptionPane.YES_OPTION){
                if(employeeDAO.updateEmployeePromotion(id, idDepartment)){
                    JOptionPane.showMessageDialog(rootPane, "Thăng chức thành công");
                    this.showOptionTransferEmp(employeeDAO.getEmployeeByDepartment(idDepartment, 1), modelTableTrabsferEmployee);
                    listTransferEmployee = employeeDAO.getEmployeeByDepartment(idDepartment, 1);
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Thăng chức thất bại");
                }
            }
        }
    }

    private void jButtonTransferEmpActionPerformed(ActionEvent evt) {
        //transfer employee form old department to new department
        int index = tblTransferEmployee.getSelectedRow();
        int indexOptionEMp = cbbDepartment2.getSelectedIndex();
        int indexOptionEmp1 = cbbDepartment1.getSelectedIndex();
        if(index == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn nhân viên để chuyển");
        }else{
            if(employeeDAO.getEmployeesIdDelete(listTransferEmployee.get(index).getEmployee_id()) == true){
                JOptionPane.showMessageDialog(rootPane, "Không còn là nhân viên");
                return;
            }else {
                int id = listTransferEmployee.get(index).getEmployee_id();
                int idDepartment = listTransferEmployee.get(index).getDepartment_id();
                //CÒn sửa lại
                int idNewDepartment = departments.get(indexOptionEMp).getDepartment_id() ;
                if(idDepartment == idNewDepartment){
                    JOptionPane.showMessageDialog(rootPane, "Nhân viên đã thuộc phòng ban này");
                }else{
                    int result = JOptionPane.showConfirmDialog(rootPane, "Bạn có chắc chuyển nhân viên này không?");
                    if(result == JOptionPane.YES_OPTION){
                        employeeDAO.transferEmployee(id, idNewDepartment);
                        this.showOptionTransferEmp(employeeDAO.getEmployeeByDepartment(idNewDepartment,1), modelTableTrabsferEmployee);
                    }
                }
            }
        }
    }


    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }                                         

    private void cbbDepartmentActionPerformed(java.awt.event.ActionEvent evt) {
        int index = cbbDepartment.getSelectedIndex();
        String selectValue = cbbDepartment.getSelectedItem().toString();
        if (selectValue.equals("Tất cả")) {
            List<Employees> employees1 = employeeDAO.getAllEmployees();
            this.showData(employees1, modelTableEmployee);
        }
        if(index> 1){
            this.showData(employeeDAO.getEmployeeByDepartment(departments.get(index-2).getDepartment_id(),1), modelTableEmployee);
        }
    }

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {
        selectedIndex = tblEmployee.getSelectedRow();
        if(employeeses.size()==0){
            JOptionPane.showMessageDialog(rootPane, "Không có nhân viên để xoá");
        }else if(selectedIndex == -1){
            JOptionPane.showMessageDialog(rootPane, "Chọn nhân viên để xoá");
        }else {
            int option = JOptionPane.showConfirmDialog(rootPane, "Bạn có muốn xoá nhân viên này không?");
            if (option == JOptionPane.YES_OPTION) {
                if (employeeDAO.deleteEmployee(employeeses.get(selectedIndex).getEmployee_id())) {
                    JOptionPane.showMessageDialog(rootPane, "Xoá thành công");
                    this.showData(employeeDAO.getAllEmployees(), modelTableEmployee);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Xoá thất bại");
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAddEmployee;
    private javax.swing.JButton btnAddDepartment;
    private javax.swing.JButton btnDeleteDepartment;
    private javax.swing.JButton btnEditDepartment;
    private javax.swing.JButton btnLoadDataDepartment;
    private javax.swing.JButton btnLoadDataEmp;
    private javax.swing.JButton btnOptionEdit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbbDepartment;
    private javax.swing.JComboBox<String> cbbDepartment1;
    private javax.swing.JComboBox<String> cbbDepartment2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButtonTransferEmp;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbHeader;
    private javax.swing.JTable tblDepartment;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTable tblTransferEmployee;
    private javax.swing.JTabbedPane transferEmployee;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    public <T> void showData(List<T> list, DefaultTableModel model) {
        model.setRowCount(0);
        for (T t : list) {
            if(t instanceof Employees){
                Employees l = (Employees) t;
                String departmentName;
                if (l.getDepartment_id() == 0) {
                    departmentName = "Chưa có phòng ban";
                }else {
                    departmentName = departmentDAO.getDepartmentById(l.getDepartment_id()).getDepartment_name();
                }
                String managerName = employeeDAO.showEmployeeById(l.getNamager_id()).getEmployee_code();
                model.addRow(new Object[]{
                    l.getEmployee_code(),l.getEmployee_name(),l.getDate_of_birth(),l.getGender(),l.getAddress(),l.getPhone(),l.getEmail(),l.getSalary(),departmentName,managerName
                });
            }
        }
    }
    public <T> void showOptionTransferEmp(List<T> list, DefaultTableModel model){
        model.setRowCount(0);
        for (T t : list) {
            if(t instanceof Employees){
                Employees l = (Employees) t;
                String departmentName;
                if (l.getDepartment_id() == 0) {
                    departmentName = "Chưa có phòng ban";
                }else {
                    departmentName = departmentDAO.getDepartmentById(l.getDepartment_id()).getDepartment_name();
                }
                String managerName = null;
                if(l.getNamager_id() == 0){
                    managerName = "Nhân viên";
                }else {
                    managerName = "Trưởng phòng";
                }
                model.addRow(new Object[]{
                    l.getEmployee_code(),l.getEmployee_name(),managerName,departmentName,l.getSalary()
                });
            }
        }
    }
    public <T> void showDataDepartment(List<T> list, DefaultTableModel model) {
        model.setRowCount(0);
        for (T t : list) {
            if(t instanceof Department){
                Department l = (Department) t;
                model.addRow(new Object[]{
                    l.getDepartment_id(),l.getDepartment_code(),l.getDepartment_name()
                });
            }
        }
    }
    private void showOptionlistStatistics(List<Statistics> listStatistics, DefaultTableModel model) {
        model.setRowCount(0);
        for (Statistics statistics : listStatistics) {
            model.addRow(new Object[]{
                statistics.getDepartment_name(),statistics.getEmployee_count(),statistics.getManager_name(),statistics.getEmployee_name_max_salary(),statistics.getSalary_max()
            });
        }
    }
    private void showCbbDepartment() {
        List<Department> departments =  departmentDAO.getAllDepartment();
        cbbDepartment.addItem("Chọn phòng ban");
        cbbDepartment.addItem("Tất cả");
        for (Department department : departments) {
            cbbDepartment.addItem(department.getDepartment_name());
        }
    }
    private void showCbbDepartment1() {
        List<Department> departments =  departmentDAO.getAllDepartment();
        cbbDepartment1.addItem("Chọn phòng ban");
        for (Department department : departments) {
            cbbDepartment1.addItem(department.getDepartment_name());
        }
    }
    private void showCbbDepartment2() {
        List<Department> departments =  departmentDAO.getAllDepartment();
        for (Department department : departments) {
            cbbDepartment2.addItem(department.getDepartment_name());
        }
    }
}
